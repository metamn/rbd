// Calls a JSON API via AJAX
// - the container has to have a `data-url` set up to perfom the call
// - the response is sent back via a callback function
var jsonAPICall = function(containerID, callback) {
  var container = document.querySelector(containerID);
  if (!container) return;
  
  var url = container.dataset.url;

  // JSON AJAX Call to an API endpoint
  // - http://www.w3schools.com/json/json_http.asp
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", url, true);
  xmlhttp.send();

  // Process request
  xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
      var result = JSON.parse(xmlhttp.responseText);
      callback(result);
    }
  }
}

// Read the `figure` element's responsive images and breakpoints for later reuse
// - the data gathered is passed to a callback function
// - element is a DOM object
var responsiveImageURL = function(element, callback) {
  if (!element) return;

  var picture = element.querySelector('.picture');

  // Collect images and breakpoints from `picture`
  // - <source media="(min-width: 600px)" srcset="/assets/images/placeholder-16-9_tablet.png, /assets/images/placeholder-16-9_tablet2x.png 2x">
  // - start with mobile then go to desktop; media queries stop at the first match
  for (var i = picture.children.length - 1; i >= 0 ; i--) {
    var srcset = picture.children[i].srcset;
    var media = picture.children[i].media;
    var images = srcset.split(', ');

    for (var j = 0; j < images.length; j++) {
      var x2 = images[j].split(' 2x');
      var retina = (x2.length > 1);

      callback(element, x2[0], media, retina);
    }
  }
};

// http://codepen.io/drainpip/pen/pvKobQ

function getScrollTop() {
  if (typeof pageYOffset != 'undefined') {
    //most browsers except IE before #9
    return pageYOffset;
  } else {
    var B = document.body; //IE 'quirks'
    var D = document.documentElement; //IE with doctype
    D = (D.clientHeight) ? D : B;
    return D.scrollTop;
  }
}


function scrollTo(element, duration, easingFunction) {
  var Y = element.getBoundingClientRect().top;
  var start = Date.now(),
      from = getScrollTop();

  if (from == Y) {
    return;
  }

  function min(a, b) {
    return a < b ? a : b;
  }

  function scroll(timestamp) {
    var currentTime = Date.now(),
        time = min(1, ((currentTime - start) / duration)),
        easedT = easingFunction(time),
        topCalc = (easedT * (Y - from)) + from;

    document.documentElement.scrollTop = topCalc;
    document.body.scrollTop = topCalc;

    if (time < 1) {
      requestAnimationFrame(scroll);
    }
    else {
      return;
    }
  }

  requestAnimationFrame(scroll)
}

// options for easing when I call the obove function
var easing = {
  // no easing, no acceleration
  linear: function(t) { return t },
  // accelerating from zero velocity
  easeInQuad: function(t) { return t * t },
  // decelerating to zero velocity
  easeOutQuad: function(t) { return t * (2 - t) },
  // acceleration until halfway, then deceleration
  easeInOutQuad: function(t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t },
  // accelerating from zero velocity
  easeInCubic: function(t) { return t * t * t },
  // decelerating to zero velocity
  easeOutCubic: function(t) { return (--t) * t * t +1 },
  // acceleration until halfway, then deceleration
  easeInOutCubic: function(t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1 },
};

// Read the `figure` element's responsive images and breakpoints
// - set as background image with `matchMedia` coming from `Picturefill`
// - example: setbackgroundImage('.slider .slides') => all .slides will have a background image set
var setBackgroundImage = function(elementID) {
  var elements = document.querySelectorAll(elementID);

  for (var i = 0; i < elements.length; i++) {
    responsiveImageURL(elements[i], setResponsiveBackgroundImage);
  }

  // Set a responsive background image using `mathcMedia`
  function setResponsiveBackgroundImage(element, image, breakpoint, retina) {
    var mediaQuery = "only screen and " + breakpoint;

    if (retina) {
      // This might not be cross platform compatible ....
      mediaQuery += " and (-webkit-min-device-pixel-ratio: 2)";
    }

    if (matchMedia(mediaQuery).matches) {
      element.style.backgroundImage = "url('" + image + "')";
    }
  }
};

// Read the `figure` element's responsive images and breakpoints
// Set as poster using `matchMedia` coming from `Picturefill`
// elementID is the container holding the video and the poster image
var videoResponsivePoster = function(elementID) {

  // Set a responsive poster using `mathcMedia`
  function setVideoResponsivePoster(element, image, breakpoint, retina) {
    var video = element.querySelector('.video');

    var mediaQuery = "only screen and " + breakpoint;

    if (retina) {
      // This might not be cross platform compatible ....
      mediaQuery += " and (-webkit-min-device-pixel-ratio: 2)";
    }

    if (matchMedia(mediaQuery).matches) {
      video.poster = image;
    }
  }

  responsiveImageURL(elementID, setVideoResponsivePoster);
};

// Adding the class `img--loaded` for images after they are all fully loaded
// - 'containerID' can be like '.hero' or '.articles .article'
var imagesLoading = function(containerID) {
  var containers = document.querySelectorAll(containerID);

  for (var i = 0; i < containers.length; i++) {
    imageLoading(containers[i]);
  }
}

// Adding the class `img-loaded` for images inside a single container
// - uses the imagesLoaded external library
var imageLoading = function(container) {
  var images = container.querySelectorAll('.img');
  var figures = container.querySelectorAll('.figure');

  imagesLoaded(container, function(instance) {
    for (var i = 0; i < images.length; i++) {
      figures[i].classList.add('figure--loaded');
      images[i].classList.add('img--loaded');
    }
  });
}

var slider = function(slide, bullets) {

  // Slides
  var slides = document.querySelectorAll(slide);
  var slideCount = slides.length;
  var pos = 0;
  var direction = 'prev';


  // callback for the current slide
  function callbackCurrentSlide(slide) {
    // do nothing ...
  }


  // - move out of viewport all inactive slides
  // - we do these manually instead of loading Modernizr which is not used elsewhere
  // - from https://github.com/thebird/Swipe/blob/master/swipe.js
  function setTransform() {
    for (var i = 0; i < slideCount; i++ ) {
      var position = (i + pos) * slides[0].offsetWidth;

      // a callback on the current slide
      // - it can be empty, or processing some dynamic information
      if (position == 0) {
        // callbackCurrentSlide(slides[i]);
      }

      // do the cross-browser transform
      slides[i].style.webkitTransform = 'translate(' + (position) + 'px, 0)' + 'translateZ(0)';
      slides[i].style.MozTransform =
      slides[i].style.msTransform =
      slides[i].style.OTransform =
      slides[i].style.transform = 'translateX(' + (position) + 'px)';
    }
  }

  // - initialize slides in a responsive way
  setTransform();
  window.addEventListener('resize', setTransform);


  // Swipe navigation
  // Add swipe to each slide
  for (var i = 0; i < slides.length; i++) {
    var hammer = new Hammer(slides[i]);
    hammer.get('swipe').set({
      direction: Hammer.DIRECTION_HORIZONTAL,
      threshold: 1,
      velocity: 0.1
    });

    hammer.on("swipeleft", function() {
      previousSlide(1);
      removeActiveBulletClass();
      setActiveBulletClass();
    });

    hammer.on("swiperight", function() {
      nextSlide(1);
      removeActiveBulletClass();
      setActiveBulletClass();
    });
  }



  // Bullets navigation
  var bullets = document.querySelectorAll(bullets);

  // - add click event to bullets
  for (var i = 0; i < bullets.length; i++) {
    bullets[i].addEventListener('click', clickBullet, false);
  }

  // - click on a bullet
  function clickBullet(event) {
    active = this.classList.contains('active');

    if (!active) {
      moveSlide(this);
      removeActiveBulletClass();
      this.classList.add('active');
    }
  }

  // - move slide
  function moveSlide(bullet) {
    current = bulletIndex(bullet);
    step = current - Math.abs(pos);

    if (Math.abs(pos) < current ) {
      previousSlide(step);
    } else {
      nextSlide(-step);
    }
  }



  // Click navigation
  // - add click event on slide
  for (var i = 0; i < bullets.length; i++) {
    slides[i].addEventListener('click', clickSlide, false);
  }

  // - click on a slide
  function clickSlide(event) {
    if (direction == 'prev') {
      previousSlide(1);
    } else {
      nextSlide(1);
    }

    if (pos == -(slideCount - 1)) {
      direction = 'next';
    }
    if (pos == 0) {
      direction = 'prev';
    }

    removeActiveBulletClass();
    setActiveBulletClass();
  }


  // Helpers

  // Return the index of the clicked element
  function bulletIndex(bullet) {
    var siblings = bullet.parentNode.childNodes;
    for (var i = 0; i < siblings.length; i++) {
      if (bullet == siblings[i]) break;
    }
    return i - 1;
  }


  // Clear active state for all bullets
  function removeActiveBulletClass() {
    for (var i = 0; i < bullets.length; i++) {
      bullets[i].classList.remove('active');
    }
  }


  // Set active state for a bullet
  function setActiveBulletClass() {
    for (var i = 0; i < bullets.length; i++) {
      if (slides[i].style['transform'] == 'translateX(0px)') {
        bullets[i].classList.add('active');
      }
    }
  }


  // Get previous slide
  // - it moves prev with 'step' slides
  function previousSlide(step) {
    pos = Math.max(pos - step, -(slideCount - 1));
    setTransform();
  }

  // Get next slide
  // - it moves next with 'step' slides
  function nextSlide(step) {
    pos = Math.min(pos + step, 0);
    setTransform();
  }
}


slider('.slider__slides .slide', '.slider__bullets div');

var visibleItems = [];

// Click on a filter with a certain type
// - type: the css class prefix, like 'year'
// - filtersID : all filters of the same type, like 'year-filters' etc
// - itemsID: the items to be filtered, like 'thumbs'
var filter = function(type, filtersID, itemsID) {
  var filters = document.querySelectorAll(filtersID);
  var items = document.querySelectorAll(itemsID);

  for (var i = 0; i < filters.length; i++) {
    filters[i].addEventListener('click', clickFilter, false);
  }


  // Click on a filter
  function clickFilter(event) {
    // get current filter information
    attr = this.dataset.attr;

    // mark all filters inactive
    markAllInactive(filters, 'list__item--active');
    visibleItems = removeAllElements(visibleItems, type);

    // mark this filter active
    this.classList.add('list__item--active');
    visibleItems.push(attr);

    // do the filtering
    doFilter();
  }


  // Show / hide items
  function doFilter() {
    for (var i = 0; i < items.length; i++) {
      // show all
      items[i].classList.remove('thumb--inactive');

      // combine filters
      // - only those items will be displayed who satisfy all filter criterias
      var visible = true;

      for (var j = 0; j < visibleItems.length; j++) {
        visible = visible && items[i].classList.contains(visibleItems[j]);
      }

      if (!visible) {
        items[i].classList.add('thumb--inactive');
      }
    }
  }


  // Remove certain elements from an array
  function removeAllElements(array, type) {
    return array.filter(function(item) {
      return (item.indexOf(type) === -1);
    });
  }

  // Remove the active class from a series of DOM elements
  function markAllInactive(items, klass) {
    for (var i = 0; i < items.length; i++) {
      items[i].classList.remove(klass);
    }
  }


}

filter('technique', '.works__techniques .list__item', '.works__thumbs .thumb');
filter('year', '.works__years .list__item', '.works__thumbs .thumb');

imagesLoading('.thumb');

imagesLoading('.slider .slide');
